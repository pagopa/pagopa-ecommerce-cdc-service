# Deploy to Azure Kubernetes Service:
# - DEV
# - UAT -> PROD
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'DEV_DEPLOY'
    displayName: 'DEV deployment without release'
    type: boolean
    default: True
    values:
      - False
      - True

  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT environment with PROD promotion'
    type: boolean
    default: False
    values:
      - False
      - True

  - name: 'SKIP_BUILD'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: False
    values:
      - False
      - True

  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced (latest tag)"
    type: boolean
    default: False
    values:
      - False
      - True

  - name: "UAT_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green UAT deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True

  - name: "PROD_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green PROD deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v6.14.0
      endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

stages:
  # --- START Deploy UAT --- #
  - stage: "Build_release_candidate"
    displayName: 'Build release candidate'
    dependsOn: [ ]
    condition:
      and(
      succeeded(),
      eq(${{parameters.UAT_PROD_DEPLOY}}, true)
      )
    jobs:
      - job: "build"
        displayName: 'Build release candidate docker image'
        steps:
          - task: Docker@2
            displayName: "docker login"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"

          - task: Bash@3
            displayName: "docker build and push (force)"
            condition: and(succeeded(), eq(${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}, True))
            env:
              GITHUB_TOKEN: $(GITHUB_RO_TOKEN)
            inputs:
              targetType: "inline"
              script: |
                echo "[INFO] the parameter FORCE_REPLACE_DOCKER_IMAGE is set to true, start build and push"
                echo "[INFO] Image version: cdctest-100904"
                docker build -t $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):cdctest-100904 \
                  -f Dockerfile \
                  --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                  .
                docker build -t $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest \
                  -f Dockerfile \
                  --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                  .
                docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):cdctest-100904
                docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest

          - task: Bash@3
            displayName: "docker build and push"
            condition: and(succeeded(), eq(${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}, False))
            env:
              GITHUB_TOKEN: $(GITHUB_RO_TOKEN)
            inputs:
              targetType: "inline"
              script: |
                # docker will return 0 on success or 1 on failure.
                echo "[INFO] Image version: cdctest-100904"
                docker manifest inspect $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):cdctest-100904 > /dev/null
                if [ $? -eq 0 ]; then
                  echo "[INFO] docker image already exists in the registry, skip build and push"
                else
                  echo "[INFO] docker image does not exist in the registry, start build and push"
                  docker build -t $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):cdctest-100904 \
                    -f Dockerfile \
                    --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                    .
                  docker build -t $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest \
                    -f Dockerfile \
                    --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
                    .
                  docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):cdctest-100904
                  docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):latest
                fi

  - stage: "Deploy_UAT_Green"
    displayName: 'UAT green deployment'
    dependsOn: [ Build_release_candidate ]
    variables:
      app_version: cdctest-100904
    jobs:
      - deployment: "Green_deployment"
        displayName: "Green deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: KubectlInstaller@0
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: "ecommerce"
                    APP_NAME: b-pagopaecommercecdcservice
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(app_version)
  # --- END Deploy UAT --- #
